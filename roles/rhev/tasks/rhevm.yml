- name: install rhevm
  yum:
    name: rhevm

- name: create a tempfile for the answer file
  tempfile:
    state: file
    suffix: temp
  register: answer_file

- name: install ansible file in tmp location
  template:
    src: engine_setup_answer_file.j2
    dest: "{{ answer_file.path }}"


- name: Run engine setup if RHEVM is not up
  block:
    - include_tasks: auth.yml
  rescue:
    - name: run RHEVM engine-setup with an answer file
      command: engine-setup --config-append={{ answer_file.path }}
  always:
    - include_tasks: cleanup.yml

- name: generate SSH key to install on RHEV Hypervisors. Store key on vagrant hypervisor
  block:
    - name: create ssh tempfile
      tempfile:
        state: file
      register: ssh_key
    - name: create openssl temp pub key
      tempfile:
        state: file
      register: openssl_pub_key
    - name: extract public pem ssl key
      shell: openssl x509 -inform pem -in {{ ovirt_cert }}  -noout -pubkey  > {{ openssl_pub_key.path }}
      register: ssl_pub_key
    - name: convert ssl pem to ssh pem
      shell: ssh-keygen -i -m PKCS8 -f {{ openssl_pub_key.path }} > {{ ssh_key.path }}
    - name: place ssh key on vagrant directory for install on hypervisors.
      fetch:
        src: "{{ ssh_key.path }}"
        dest: ./rhevm.pub.key
        flat: yes
  always:
    - name: delete ssh key tempfile
      file:
        state: absent
        path: "{{ ssh_key.path }}"
      when: ssh_key is defined

    - name: delete openssl pub key tempfile
      file:
        state: absent
        path: "{{ openssl_pub_key.path }}"
      when: openssl_pub_key is defined

- name: confirm that the nfs_rhev_home is set
  assert:
    that:
      - " nfs_rhev_home is defined "
    msg: "nfs_rhev_home is not defined"

- name: set nfs directory with the proper permissions
  file:
    path: "{{ nfs_rhev_home}}"
    owner: vdsm
    group: kvm
    mode: 0770
    state: directory

- name: update firewalld to allow NFS server to function
  firewalld:
    service: "{{ item }}"
    permanent: true
    state: enabled
  with_items: "{{ nfs_services }}"
  notify:
    - start firewalld
    - reload firewalld
